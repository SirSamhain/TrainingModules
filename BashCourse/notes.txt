chmod u+rwx
	add read write eXecute permissions to a file
	u stands for user that created the file
	a stands for all
	- instead of + to remove permissions

#! (hashbang)
	first line of the script
	declares that this script file should be interpreted by the bash interpreter
	declares other options that should be used by the interpreter

$* means all of the input from console
$1 just the first word from console


use $HOME instead of ~ because the ~ get's escaped by double quotes. just to be safe

use double quotes around variable names: "$x" instead of $x


read is a builtin command that reads user input "read -p "prompt" var" shows a prompt

set is used to set bash option in different parts of the script

bash returns a # between 0-255. 0 is a success and all other codes are errors

printf doens't print a new line by default

redirecting into streams 2>&1....this redirects the error stream into the stdout stream

	while test; do
		;;thing to do
	done

until loop does it as long as test == false
	until test; do
		;;thing to do
	done

break breaks out of loop

continue skips the rest of the iteration and goes to next iteration

case WORD in
	PATTERN1)
		code for pattern1;;
	PATTERN2)
		code for pattern2;;
esac



declare or typeset(considered depricated)
	declare -p var
	declare -i num (only holds integers -i) will set strings = 0
unset an attribute with +
	declare +i num

let command
	let n=100/2
((..))
	((++x))
	((p=x/100))
	((p=$(ls|wc -l) * 10))
	equivalent to the let command
$((..))
	p=$((x/100))
	just evaluates and sets p to the result


-r read only variable basically a constant

exporting variables
	

arrays
	stored and retrieved by index
	x[0]="some"
	x[1]="word"
	retrieving
	${x[0]} gets "some"
	${x[*]} gets all of them in a long string
	declare -a var #declares var as an array

	initializing array
	ar=(1 2 3 a b c)
	
	length of array
	${#array[*]}

		
Special variables
	$1 positional parameters 
	$* and $@ get all
	$# size 	
	$0 

	Shift
	Getopts

	POSITIONAL
	hold the n-th command line argument: $1, $2, etc,
	above 9 use braces: ${10}
	$0 - holds the name of the script as it was called

	SHIFT
	removes the first argument
	all positional parameters shift
		* $2 -> $1
		* $3 -> $2
		* etc...
		$# is lowered by one

	GETOPTS
	expects options to start with a dash (-x)
	allows options that take an argument (-f file)

	getopts optstring name
	optstring
		* A list expected options
		* "ab" will let your script handle an option -a and/or -b
		* Append: to options that take an argument
	name
		* the name of a variable
		* every time you call getopts, it will place the next option into $name
	getopts returns false when there aren't any options left 
		while getopts "a:b:c" opt; do
			case $opt in
				a);;
				b);;
				c);;
				\?);;
			esac
		done
	arguments to a option is stored in ${OPTARG}

FUNCTIONS

	define your own command
	name() {.....}
		you can run the code in the braces as a new command
	
	execute it like any command
		give it arguments
		use redirection
	positional parameters are available for function arguments
		$1, $2, ...
	naming your functions same rule as scripts
	
	bash variables are globally visible
		* in a function, you can make a variable local to that function
		* use declare or local

	exit a function with return
		* returns a status code, like exit
		* without a return statement, function returns status of last statement
	Returning any other value
		* use a global variable
		* send the data to output and use command substitution $()
	exporting a function 
		export -f functionName

	


Parameter Expansion
	allows powerful string manipulation
	${#var}: length of $var
	
	Removing part of a string
		* ${var#pattern} Removes shortest match from begin of string
		* ${var##pattern} Removes longest match from begin of string
		* ${var%pattern} Removes shortest match from end of string
		* ${var%%patter} longest from end
	Pattern matching is like pathname matching with *,? and []
	example with i="/Users/jortiz/demo.txt"
		${i#*/} Users/jortiz/demo.txt
		${i##*/} demo.txt

	SEARCH AND REPLACE
		${var/pattern/string} : sub first match
		${var//pattern/string} : sub all matches

	Anchor your pattern
	${var/#patter/string} matches beginning of the string
	${var/%pattern/string} matches end of the string
	
	Default value
		* ${var:-value} will evaluate to "value" if var is empty or unset
		* ${var-value} similar, but only if var is unset
	assign a default value
		* ${var:=value} if var was empty or unset, this evaluates to "value" and assigns it to var
		* ${var=value}
		* similar, but only if var is unset

	CONDITIONAL EXPRESSIONS
		* ==, != operators in [[..]] do pattern matching
		* [[ $var == pattern ]] returns true when $var matches the pattern
		* [[ $filename == *.txt ]]
		* use quotes to force a string 
	REGEX
		* =~ does regular expression matching
			* very powerful
			* uses POSIX extended regular expressions
		* ? matches the token before it 0 or 1 times
			* [0-9]? will match a single digit or nothing at all
		*  * matches the token before it for any number of times
			* [a-z]* will match any lowercase text or nothing at all
		* + matches the token before it for one or more times
			* [0-9]+ will match 1 or more digits
		* ^ matches start of string
		* $ matches end of string
	End of Options
		* is denoted by --
			* supported by many UNIX commands
			* Arguments after this will not be interpreted as options
		* Makes it safe when working with data that starts with a dash
			* for example with a file called "-l.txt"
			* rm -- -l.txt
			for i in ".txt; do touch --$i; done


MANY WAYS TO RUN A SCRIPT :>
	
	Using hash-bang and running it as a command
		* will start a bash subprocess
		* executable permission has to be set
	Or when it does not have a hash-bang
		* bash myscript
		* no permissions necessary
		* bash -x myscipt
	To import code in the current shell process
		* source myscript
		* .myscript
		* this is basically what happens with .bashrc

	Put a command in the background with &
		* myscript &
		* it will be disconnected from the interactive session 
		* will be suspended if it tries to read input from the terminal
	Long running scripts
		* keep your script running when you exit the terminal session
		* nohup myscript &
		* nohup means no hickup
	Run your script with a lower priority
		nice myscript 
	At
		* will execute script at a specific time
		* at -f myscript noon tomorrow
	cron 
		* scheduling scripts
	
	set 
		-x prints each command with its arguments as it is executed
		-u gives an error when using an unitialized variable and exits script
		-n read commands but do no execute
		-v print each command as it is read
		-e exits script whenever a command fails (but not worth if, while, until, ||, &&)
		... and more

	shopt
		* can set many options with -s, unset with -u
		* shopt -s nocaseglob: ignore case with pathname expansion
		* shopt -s extglob: enable extended pattern matching
		* shopt -s dotglob: include hidden files with pathname expansions
		* set -o noclobber: don't overwrite files on redirection operations










































